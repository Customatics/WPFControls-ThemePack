<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:shell="clr-namespace:System.Windows.Shell;assembly=PresentationFramework"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:base="clr-namespace:ThemePack.Common.Base;assembly=ThemePack.Common"
                    xmlns:assets="clr-namespace:ThemePack.Common.Assets;assembly=ThemePack.Common">

    <Style x:Key="Window.Form" TargetType="Window">
        <!--<Setter Property="Height" Value="591" />-->
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="SizeToContent" Value="Width" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="MaxWidth" Value="818" />
        <!--<Setter Property="MinWidth" Value="409" />-->
        <Setter Property="MaxHeight" Value="600" />
        <!--<Setter Property="MinHeight" Value="500" />-->
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource StatusBar.Bg.Fill}"/>
    </Style>

    <Style x:Key="Window.Form.Scalable" TargetType="Window">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="MinWidth" Value="800" />
        <Setter Property="MinHeight" Value="600" />
        <Setter Property="ShowInTaskbar" Value="True" />
        <Setter Property="Padding" Value="0"/>

        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome CaptionHeight="0"
                                CornerRadius="0"
                                GlassFrameThickness="0"
                                NonClientFrameEdges="None"
                                ResizeBorderThickness="3"
                                        />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Margin="7">
                        <Border   Background="{StaticResource White.Fill}"   BorderBrush="{StaticResource StatusBar.Bg.Fill}" BorderThickness="0" CornerRadius="0" ClipToBounds="True">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="0" Color="Red" ShadowDepth="0" Direction="180" Opacity="0"/>
                            </Border.Effect>
                        </Border>
                        <Border BorderBrush="{StaticResource StatusBar.Bg.Fill}" BorderThickness="1" CornerRadius="0" ClipToBounds="True"/>

                        <Grid Margin="0">
                            <!--<Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>-->
                            <!--<TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}" 
                                              Foreground="{StaticResource DarkDark}"
                                              Grid.Row="0"
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Bottom"
                                              FontWeight="Bold"
                                              FontSize="16"
                                         />
                            <Button Name="CloseButton" 
                                    Width="20" Height="20"   
                                    Grid.Row="0"
                                    HorizontalAlignment="Right"
                                    BorderThickness="0"
                                    Margin="0,12,12,0"
                                    Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CloseCommand}"
                                    Style="{StaticResource CloseButton}"/>-->
                            <ContentPresenter Margin="0"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="Window.Shade" TargetType="Rectangle">
        <Setter Property="Fill" Value="{StaticResource Gray.Alpha40.Fill}" />
    </Style>

    <Style x:Key="Window.Title" TargetType="Label">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource White.Fill}"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontFamily" Value="Segoe UI Semilight"/>
    </Style>

    <Style x:Key="Window.Bottom" TargetType="Grid">
        <Setter Property="Height" Value="107"/>
    </Style>

    <Style x:Key="Window.ButtonsHolder" TargetType="Grid">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="40,0"/>
        <Setter Property="Height" Value="32"/>
    </Style>

    <Style x:Key="Window.TitleHolder" TargetType="Grid">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="36,0"/>
        <Setter Property="Height" Value="44"/>
    </Style>

    <Style x:Key="Window.Button" TargetType="Button">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="1,0,0,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Data="{TemplateBinding Property=Path.Data}" Width="{TemplateBinding Property=Path.Width}" Height="{TemplateBinding Property=Path.Height}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FF096CBD"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FF0765B2"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Window.ActionsHolder" TargetType="Grid">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="2,0"/>
    </Style>

    <Style x:Key="Window.LeftPanel" TargetType="Grid">
        <Setter Property="Width" Value="409"/>
    </Style>

    <Style x:Key="Window.RightPanel" TargetType="Grid">
        <Setter Property="Width" Value="409"/>
        <Setter Property="Background" Value="{StaticResource Gray9.Fill}"/>
    </Style>

    <Style x:Key="Window.ContentHolder" TargetType="Grid">
        <Setter Property="MinWidth" Value="409"/>
        <Setter Property="MaxWidth" Value="817"/>
    </Style>

    <Style x:Key="Window.Panel" TargetType="StackPanel">
        <Setter Property="Margin" Value="38,49,38,0"/>
    </Style>

    <Style x:Key="Window.Button.Minimize" TargetType="Button" BasedOn="{StaticResource Window.Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Data="M15,12L30,12 30,27 15,27z" Width="11" Height="1" Fill="{StaticResource White.Fill}" Stretch="Fill" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="Window.Button.Maximize" BasedOn="{StaticResource Window.Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Data="M0,0L0,11 12,11 12,0 0,0z M11,10L1,10 1,1 11,1 11,10z" Width="12" Height="11" Fill="{StaticResource White.Fill}" Stretch="Fill"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="Window.Button.Close" BasedOn="{StaticResource Window.Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Data="M11,0.7L10.3,0 5.5,4.8 0.7,0 0,0.7 4.8,5.5 0,10.3 0.7,11 5.5,6.2 10.3,11 11,10.3 6.2,5.5z" Width="11" Height="11" Fill="{StaticResource White.Fill}" Stretch="Fill"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Border" x:Key="MouseDragBorder.Horizontal">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="Transparent" Offset="0"/>
                    <GradientStop Color="Transparent" Offset="0.332"/>
                    <GradientStop Color="Transparent" Offset="0.333"/>
                    <GradientStop Color="Transparent" Offset="0.665"/>
                    <GradientStop Color="Transparent" Offset="0.666"/>
                    <GradientStop Color="Transparent" Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="15"/>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Border.DragEnter">
                <BeginStoryboard x:Name="DragHoverStoryboard">
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="Background.GradientStops[2].Color" Duration="0:0:0.1" To="#FFC3C3C3" />
                        <ColorAnimation Storyboard.TargetProperty="Background.GradientStops[3].Color" Duration="0:0:0.1" To="#FFC3C3C3" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.DragLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="Background.GradientStops[2].Color" Duration="0:0:0" To="Transparent" />
                        <ColorAnimation Storyboard.TargetProperty="Background.GradientStops[3].Color" Duration="0:0:0" To="Transparent" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.Drop">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="Background.GradientStops[2].Color" Duration="0:0:0" To="Transparent" />
                        <ColorAnimation Storyboard.TargetProperty="Background.GradientStops[3].Color" Duration="0:0:0" To="Transparent" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Border" x:Key="MouseDragBorder.Vertical">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="Transparent" Offset="0"/>
                    <GradientStop Color="Transparent" Offset="0.332"/>
                    <GradientStop Color="Transparent" Offset="0.333"/>
                    <GradientStop Color="Transparent" Offset="0.665"/>
                    <GradientStop Color="Transparent" Offset="0.666"/>
                    <GradientStop Color="Transparent" Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Border" x:Key="MouseDragBorder.Top" BasedOn="{StaticResource MouseDragBorder.Horizontal}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Tag" Value="Top"/>
        <Setter Property="Margin" Value="0,-8,0,0"/>
    </Style>

    <Style TargetType="Border" x:Key="MouseDragBorder.Bottom" BasedOn="{StaticResource MouseDragBorder.Horizontal}">
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Tag" Value="Bottom"/>
        <Setter Property="Margin" Value="0,0,0,-7"/>
    </Style>

    <Style TargetType="Border" x:Key="MouseDragBorder.Left" BasedOn="{StaticResource MouseDragBorder.Vertical}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Tag" Value="Left"/>
        <Setter Property="Margin" Value="0,-7,0,0"/>
    </Style>

    <Style TargetType="Border" x:Key="MouseDragBorder.Right" BasedOn="{StaticResource MouseDragBorder.Vertical}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Tag" Value="Right"/>
        <Setter Property="Margin" Value="0,0,0,-7"/>
    </Style>

    <Style TargetType="Border" x:Key="MouseDragInside">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="Border.DragEnter">
                <BeginStoryboard x:Name="DragHoverStoryboard">
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" Duration="0:0:0" To="#ffb3b3b3" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.DragLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" Duration="0:0:0" To="Transparent" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.Drop">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" Duration="0:0:0" To="Transparent" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <!--<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource StatusBar.Bg.Fill}"/>
            </Trigger>-->
        </Style.Triggers>
    </Style>

    <Style x:Key="RectBorderStyle" TargetType="Rectangle">
        <Setter Property="Fill" Value="Transparent"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ResizeMode}" Value="NoResize">
                <Setter Property="Visibility" Value="Hidden"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WindowBack" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{StaticResource StatusBar.Bg.Fill}"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <!--<Setter Property="BitmapEffect">
            <Setter.Value>
                <DropShadowBitmapEffect Color="Red" Direction="-90" ShadowDepth="2" Softness="5"/>
            </Setter.Value>
        </Setter>-->
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=base:BaseWindow}, Path=IsActive}" Value="False">
                <Setter Property="Background" Value="{StaticResource Tab.Blue.Bg3.Fill}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Window Templates -->
    <ControlTemplate x:Key="WindowTemplate.Normal" TargetType="{x:Type base:BaseWindow}">
        <ControlTemplate.Resources>
            <GridLength x:Key="BorderWidth">7</GridLength>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="Margin" Value="7"/>
            </Trigger>
        </ControlTemplate.Triggers>


        <Grid x:Name="WindowRoot" Style="{DynamicResource WindowBack}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding WindowLoadedCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="Unloaded">
                    <i:InvokeCommandAction Command="{Binding WindowUnloadedCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Grid.InputBindings>
                <KeyBinding Key="Escape" Command="{Binding RequestCloseCommand}"/>
            </Grid.InputBindings>

            <Border x:Name="WindowFrame" Style="{DynamicResource WindowBorder}">
                <Grid x:Name="WindowLayout">

                    <!-- The title bar -->
                    <Grid Margin="0" VerticalAlignment="Top">
                        <Border Background="Transparent" >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonDown">
                                    <assets:InvokeInteractiveCommandAction Command="{Binding TitleMouseLeftButtonDownCommand}" PassArguments="True" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Border>
                        <!-- MouseLeftButtonDown="MoveWindow" MouseMove="OnBorderMouseMove"  -->
                        <Image x:Name="IconApp" Margin="10, 0, 0, 0" HorizontalAlignment="Left" Source="{TemplateBinding Icon}" IsHitTestVisible="False"/>
                        <TextBlock Foreground="White" Text="{TemplateBinding Title}" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Normal" Margin="10,0,0,0" IsHitTestVisible="False">

                        </TextBlock>
                        <!--  MouseLeftButtonDown="MoveWindow" -->

                        <!-- Window state buttons -->
                        <StackPanel Margin="0" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                            <Button x:Name="MinimizeButton" Focusable="False"  Style="{StaticResource Window.Button.Minimize}" Command="{Binding MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type base:BaseWindow}}}">
                            </Button>
                            <Button x:Name="MaximizeButton" Focusable="False" Style="{StaticResource Window.Button.Maximize}" Command="{Binding MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type base:BaseWindow}}}">
                            </Button>
                            <Button x:Name="CloseButton" Focusable="False" Style="{StaticResource Window.Button.Close}" Command="{Binding RequestCloseCommand}">
                            </Button>
                        </StackPanel>
                    </Grid>

                    <!-- The window content -->
                    <Border x:Name="WindowContent" Background="Transparent" Margin="1,34,1,1">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>

                    <!-- Grips -->

                    <!-- Sides -->
                    <Rectangle x:Name="leftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Left"/>
                    <Rectangle x:Name="rightSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Right"/>
                    <Rectangle x:Name="topSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Top"/>
                    <Rectangle x:Name="bottomSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Bottom"/>
                    <!--Corners -->
                    <Rectangle Name="topLeftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
                    <Rectangle Name="topRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomLeftSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="WindowTemplate.NotMinimized" TargetType="{x:Type base:BaseWindow}">
        <ControlTemplate.Resources>
            <GridLength x:Key="BorderWidth">7</GridLength>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="Margin" Value="7"/>
            </Trigger>
        </ControlTemplate.Triggers>


        <Grid x:Name="WindowRoot" Style="{DynamicResource WindowBack}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding WindowLoadedCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="Unloaded">
                    <i:InvokeCommandAction Command="{Binding WindowUnloadedCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Grid.InputBindings>
                <KeyBinding Key="Escape" Command="{Binding RequestCloseCommand}"/>
            </Grid.InputBindings>

            <Border x:Name="WindowFrame" Style="{DynamicResource WindowBorder}">
                <Grid x:Name="WindowLayout">

                    <!-- The title bar -->
                    <Grid Margin="0" VerticalAlignment="Top">
                        <Border Background="Transparent" >
                            <i:Interaction.Triggers>

                                <i:EventTrigger EventName="MouseLeftButtonDown">
                                    <assets:InvokeInteractiveCommandAction Command="{Binding TitleMouseLeftButtonDownCommand}" PassArguments="True" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Border>
                        <!-- MouseLeftButtonDown="MoveWindow" MouseMove="OnBorderMouseMove"  -->
                        <Image x:Name="IconApp" Margin="10, 0, 0, 0" HorizontalAlignment="Left" Source="{TemplateBinding Icon}" IsHitTestVisible="False"/>
                        <TextBlock Foreground="White" Text="{TemplateBinding Title}" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Normal" Margin="10,0,0,0" IsHitTestVisible="False">

                        </TextBlock>
                        <!--  MouseLeftButtonDown="MoveWindow" -->

                        <!-- Window state buttons -->
                        <StackPanel Margin="0" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                            <!--<Button x:Name="MinimizeButton" Focusable="False"  Style="{StaticResource Window.Button.Minimize}" Command="{Binding MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type base:BaseWindow}}}">
              </Button>-->
                            <Button x:Name="MaximizeButton" Focusable="False" Style="{StaticResource Window.Button.Maximize}" Command="{Binding MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type base:BaseWindow}}}">
                            </Button>
                            <Button x:Name="CloseButton" Focusable="False" Style="{StaticResource Window.Button.Close}" Command="{Binding RequestCloseCommand}">
                            </Button>
                        </StackPanel>
                    </Grid>

                    <!-- The window content -->
                    <Border x:Name="WindowContent" Background="Transparent" Margin="1,34,1,1">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>

                    <!-- Grips -->

                    <!-- Sides -->
                    <Rectangle x:Name="leftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Left"/>
                    <Rectangle x:Name="rightSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Right"/>
                    <Rectangle x:Name="topSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Top"/>
                    <Rectangle x:Name="bottomSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Bottom"/>
                    <!--Corners -->
                    <Rectangle Name="topLeftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
                    <Rectangle Name="topRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomLeftSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="WindowTemplate.Message" TargetType="{x:Type base:BaseWindow}">
        <ControlTemplate.Resources>
            <GridLength x:Key="BorderWidth">7</GridLength>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="Margin" Value="7"/>
            </Trigger>
        </ControlTemplate.Triggers>

        <Grid x:Name="WindowRoot" Style="{DynamicResource WindowBack}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding WindowLoadedCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="Unloaded">
                    <i:InvokeCommandAction Command="{Binding WindowUnloadedCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Grid.InputBindings>
                <KeyBinding Key="Escape" Command="{Binding RequestCloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type base:BaseWindow}}}"/>
            </Grid.InputBindings>
            <Border x:Name="WindowFrame" Style="{DynamicResource WindowBorder}">
                <Grid x:Name="WindowLayout">

                    <!-- The title bar -->
                    <Grid Margin="0" VerticalAlignment="Top">

                        <Grid Style="{StaticResource Form.Title}" Background="Transparent" Grid.Row="0" Grid.Column="0">
                            <Border Background="Transparent" >
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                        <assets:InvokeInteractiveCommandAction Command="{Binding TitleMouseLeftButtonDownCommand}" PassArguments="True" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Border>
                            <!--  MouseLeftButtonDown="OnTitleMouseLeftButtonDown" MouseLeftButtonUp="OnTitleMouseLeftButtonUp" -->
                            <Grid Style="{StaticResource Window.TitleHolder}">

                                <Grid.Resources>
                                    <Style TargetType="Label" BasedOn="{StaticResource Window.Title}"/>
                                </Grid.Resources>

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="23"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <Path Style="{StaticResource Window.Icon}" IsHitTestVisible="False" />
                                <Label Content="{TemplateBinding Title}" IsHitTestVisible="False" Grid.Column="2"/>
                            </Grid>
                        </Grid>

                        <!--<Border Style="{StaticResource TitleBarBackgroundBorder}" MouseLeftButtonDown="MoveWindow" MouseMove="OnBorderMouseMove"/>-->
                        <!--<Image x:Name="IconApp" Margin="10, 0, 0, 0" HorizontalAlignment="Left" Source="{TemplateBinding Icon}"/>-->
                        <!--<TextBlock Foreground="{StaticResource TextBrush}" Text="{TemplateBinding Title}" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Normal" MouseLeftButtonDown="MoveWindow"/>-->

                        <!-- Window state buttons -->
                        <StackPanel Margin="0" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top">
                            <!--<Button x:Name="MinimizeButton" Style="{StaticResource Window.Button.Minimize}" Click="MinimizeWindow" />-->
                            <!--<Button x:Name="MaximizeButton" Focusable="False" Style="{StaticResource Window.Button.Maximize}" Command="{Binding MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type base:BaseWindow}}}">
                            </Button>-->
                            <Button x:Name="CloseButton" IsCancel="True" Style="{StaticResource Window.Button.Close}" Command="{Binding RequestCloseCommand}" />
                        </StackPanel>
                    </Grid>

                    <!-- The window content -->
                    <Border x:Name="WindowContent" Background="Transparent" Margin="1,106,1,1">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>

                    <!-- Grips -->

                    <!-- Sides -->
                    <Rectangle x:Name="leftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Left"/>
                    <Rectangle x:Name="rightSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Right"/>
                    <Rectangle x:Name="topSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Top"/>
                    <Rectangle x:Name="bottomSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Bottom"/>
                    <!--Corners -->
                    <Rectangle Name="topLeftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
                    <Rectangle Name="topRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomLeftSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="WindowTemplate.NotClosableMessage" TargetType="{x:Type base:BaseWindow}">
        <ControlTemplate.Resources>
            <GridLength x:Key="BorderWidth">7</GridLength>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="Margin" Value="7"/>
            </Trigger>
        </ControlTemplate.Triggers>

        <Grid x:Name="WindowRoot" Style="{DynamicResource WindowBack}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding WindowLoadedCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="Unloaded">
                    <i:InvokeCommandAction Command="{Binding WindowUnloadedCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border x:Name="WindowFrame" Style="{DynamicResource WindowBorder}">
                <Grid x:Name="WindowLayout">

                    <!-- The title bar -->
                    <Grid Margin="0" VerticalAlignment="Top">

                        <Grid Style="{StaticResource Form.Title}" Grid.Row="0" Grid.Column="0">
                            <Border Background="Transparent" >
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                        <assets:InvokeInteractiveCommandAction Command="{Binding TitleMouseLeftButtonDownCommand}" PassArguments="True" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Border>
                            <!--  MouseLeftButtonDown="OnTitleMouseLeftButtonDown" MouseLeftButtonUp="OnTitleMouseLeftButtonUp" -->
                            <Grid Style="{StaticResource Window.TitleHolder}">

                                <Grid.Resources>
                                    <Style TargetType="Label" BasedOn="{StaticResource Window.Title}"/>
                                </Grid.Resources>

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="23"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <Path Style="{StaticResource Window.Icon}" IsHitTestVisible="False" />
                                <Label Content="{TemplateBinding Title}" IsHitTestVisible="False" Grid.Column="2"/>
                            </Grid>
                        </Grid>
                    </Grid>

                    <!-- The window content -->
                    <Border x:Name="WindowContent" Background="Transparent" Margin="1,106,1,1">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>

                    <!-- Sides -->
                    <Rectangle x:Name="leftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Left"/>
                    <Rectangle x:Name="rightSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" HorizontalAlignment="Right"/>
                    <Rectangle x:Name="topSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Top"/>
                    <Rectangle x:Name="bottomSizeGrip" Style="{StaticResource RectBorderStyle}" Height="7" VerticalAlignment="Bottom"/>
                    <!--Corners -->
                    <Rectangle Name="topLeftSizeGrip" Style="{StaticResource RectBorderStyle}" Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
                    <Rectangle Name="topRightSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <Rectangle Name="bottomLeftSizeGrip" Style="{StaticResource RectBorderStyle}"  Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <!-- Window Style -->

    <!-- ISSUE WITH XP : http://connect.microsoft.com/VisualStudio/feedback/details/369500/problem-with-the-allowtransparency-and-popup-controls-in-wpf -->
    <!-- Hotfix : http://support.microsoft.com/kb/943326 -->
    <Style x:Key="Window.ModalStyle.NormalStyle" TargetType="{x:Type base:BaseWindow}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinHeight" Value="150"/>
        <Setter Property="MinWidth" Value="250"/>
        <Setter Property="Opacity" Value="1.0" />
        <Setter Property="Template" Value="{StaticResource WindowTemplate.Normal}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding WindowState}" Value="Maximized">
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Window.ModalStyle.NotResizable" TargetType="{x:Type base:BaseWindow}" BasedOn="{StaticResource Window.NormalStyle}">
        <Setter Property="ResizeMode" Value="NoResize" />
    </Style>

    <Style x:Key="Window.ModalStyle.Resizable" TargetType="{x:Type base:BaseWindow}" BasedOn="{StaticResource Window.NormalStyle}">

    </Style>

    <Style x:Key="Window.ModalStyle.NotMinimized" TargetType="{x:Type base:BaseWindow}" BasedOn="{StaticResource Window.NormalStyle}">
        <Setter Property="Template" Value="{StaticResource WindowTemplate.NotMinimized}" />
    </Style>

    <Style x:Key="Window.ModalStyle.NotResizable.LargeHeader" TargetType="{x:Type base:BaseWindow}" BasedOn="{StaticResource Window.NormalStyle}">
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="Template" Value="{StaticResource WindowTemplate.Message}" />
    </Style>

    <Style x:Key="Window.ModalStyle.Resizable.LargeHeader" TargetType="{x:Type base:BaseWindow}" BasedOn="{StaticResource Window.NormalStyle}">
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="Template" Value="{StaticResource WindowTemplate.Message}" />
    </Style>

    <Style x:Key="Window.ModalStyle.NotResizableNotClosable.LargeHeader" TargetType="{x:Type base:BaseWindow}" BasedOn="{StaticResource Window.NormalStyle}">
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="Template" Value="{StaticResource WindowTemplate.NotClosableMessage}" />
    </Style>
</ResourceDictionary>