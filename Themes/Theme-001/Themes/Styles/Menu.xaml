<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Theme_001.Themes.Styles">
    <!-- Menu Styles and templates -->
    <!-- based on: https://msdn.microsoft.com/en-us/library/ms752296%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396 -->

    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource SecondaryColor}"/>
        <Setter Property="FontSize" Value="{StaticResource CaptionTextSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <ControlTemplate.Resources>


                        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                            <Setter Property="Height" Value="1"/>
                            <Setter Property="Margin" Value="10,0"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Separator}">
                                        <Rectangle Fill="{DynamicResource TintColor}" Height="{TemplateBinding Height}"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <!-- TopLevelHeader -->
                        <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
                            <Border x:Name="Border">
                                <Grid>
                                    <ContentPresenter Margin="{StaticResource SpaceInner}" ContentSource="Header" RecognizesAccessKey="True"/>
                                    <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                                        <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="{StaticResource BorderSize}" BorderBrush="{DynamicResource ActiveColor}" Background="{DynamicResource PrimaryColor}">
                                            <!--<ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}">-->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="1" />
                                            <!--</ScrollViewer>-->
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                                    <Setter Property="Background" TargetName="Border">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Hover}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                                    <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="SubmenuBorder" Property="Padding" Value="0" />
                                </Trigger>
                                <Trigger SourceName="Popup" Property="IsOpen" Value="True">
                                    <Setter Property="Background" TargetName="Border">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Press}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Secondary}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>

                        <!-- TopLevelItem -->
                        <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
                            <Border x:Name="Border">
                                <Grid>
                                    <ContentPresenter Margin="{StaticResource SpaceInner}" ContentSource="Header" RecognizesAccessKey="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter Property="Background" TargetName="Border">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Hover}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Secondary}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>

                        <!-- SubmenuItem -->
                        <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
                            <Border Name="Border" Height="35" Background="Transparent">
                                <Grid VerticalAlignment="Stretch" MinWidth="{TemplateBinding MinWidth}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                                        <ColumnDefinition Width="13" />
                                    </Grid.ColumnDefinitions>
                                    <Border Name="IconBorder" BorderBrush="{DynamicResource TintColor}" BorderThickness="0" Width="12" Height="12" Margin="10,0,0,0" >
                                        <!--BorderThickness="1" Width="24" Height="24"-->
                                        <ContentPresenter Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />
                                    </Border>
                                    <Border Name="Check" Width="12" Height="12" Visibility="Hidden" Margin="10,0,0,0" Background="Transparent" BorderThickness="0" BorderBrush="{DynamicResource TintColor}" >
                                        <!--  BorderThickness="1" Width="24" Height="24"  -->
                                        <Path Name="CheckMark" Width="8" Height="8" Visibility="Collapsed" Fill="{DynamicResource SecondaryColor}" Stroke="{DynamicResource SecondaryColor}" StrokeThickness="1" Data="M0,4L3,7 8,2 7.5,1.5 3,6 0.5,3.5z" />
                                    </Border>
                                    <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" RecognizesAccessKey="True" Margin="12,0,0,0"/>
                                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" Margin="5,2,0,2" HorizontalAlignment="Right" Foreground="{DynamicResource TintColor}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <!--<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />-->
                                    <Setter TargetName="IconBorder" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsCheckable" Value="true">
                                    <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource HoverColor}" />
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryColor}" />
                                    <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource PrimaryColor}" />
                                    <Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource PrimaryColor}" />
                                    <Setter TargetName="HeaderHost" Property="TextElement.Foreground" Value="{DynamicResource PrimaryColor}"/>
                                    <Setter TargetName="InputGestureText" Property="Foreground">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Primary}" Opacity="{StaticResource TintOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Secondary}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="HeaderHost" Property="TextElement.Foreground">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Secondary}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>

                        <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
                            <Border Name="Border" Height="35" Background="Transparent">
                                <Grid VerticalAlignment="Stretch" MinWidth="{TemplateBinding MinWidth}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                                        <ColumnDefinition Width="13" />
                                    </Grid.ColumnDefinitions>
                                    <Border Name="IconBorder" BorderBrush="{DynamicResource TintColor}" BorderThickness="0" Width="12" Height="12" Margin="10,0,0,0" >
                                        <!--  BorderThickness="1" Width="24" Height="24"  -->
                                        <!--<ContentPresenter Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />-->
                                    </Border>
                                    <Border Name="Check" Width="12" Height="12" Visibility="Hidden" Margin="10,0,0,0" Background="Transparent" BorderThickness="0" BorderBrush="{DynamicResource TintColor}" >
                                        <!--  BorderThickness="1" Width="24" Height="24"  -->
                                        <Path Name="CheckMark" Width="8" Height="8" Visibility="Collapsed" Fill="{DynamicResource SecondaryColor}" Stroke="{DynamicResource SecondaryColor}" StrokeThickness="1" Data="M0,4L3,7 8,2 7.5,1.5 3,6 0.5,3.5z" />
                                    </Border>
                                    <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" RecognizesAccessKey="True" Margin="12,0,0,0"/>
                                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" Margin="5,2,0,2" HorizontalAlignment="Right" Foreground="{DynamicResource TintColor}" />
                                    <Path Name="Expandable"  Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{DynamicResource SecondaryColor}" />
                                    <Popup Name="Popup" Placement="Right" HorizontalOffset="0" VerticalOffset="-2" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True"  PopupAnimation="Fade">
                                        <Border Name="SubmenuBorder" Background="{DynamicResource PrimaryColor}" BorderBrush="{DynamicResource ActiveColor}" BorderThickness="{StaticResource BorderSize}" Padding="{StaticResource BorderSize}">
                                            <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">
                                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <!--<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />-->
                                    <Setter TargetName="IconBorder" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource HoverColor}" />
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryColor}" />
                                    <Setter TargetName="Expandable" Property="Fill" Value="{DynamicResource PrimaryColor}" />
                                    <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource PrimaryColor}" />
                                    <Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource PrimaryColor}" />
                                    <Setter TargetName="InputGestureText" Property="Foreground">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Primary}" Opacity="{StaticResource TintOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Secondary}" Opacity="{StaticResource DisabledOpacity}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>

                        <!-- MenuItem Style -->
                        <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                            <Style.Triggers>
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                                    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                                </Trigger>
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>

                        <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />

                        <!--<Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Style="{StaticResource MenuScrollButton}" Grid.Row="0" Grid.Column="0" Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource UpArrow}" />
                        </RepeatButton>
                        <RepeatButton Style="{StaticResource MenuScrollButton}" Grid.Row="2" Grid.Column="0" Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource DownArrow}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

                    </ControlTemplate.Resources>
                    <!--<Border BorderThickness="1">-->
                        <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True" />
                    <!--</Border>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>