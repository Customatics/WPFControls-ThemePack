<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:vc="clr-namespace:ThemePack.Common.Converters;assembly=ThemePack.Common"
    xmlns:c="clr-namespace:ThemePack.Common.AttachedProperties;assembly=ThemePack.Common">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Form.xaml"></ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="Button.Solid" TargetType="{x:Type Button}" >
        <Setter Property="Background" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryColor}"/>
        <Setter Property="FontSize" Value="{StaticResource BodyTextSize}"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="MinWidth" Value="{DynamicResource ControlMinWidth}"/>
        <Setter Property="BorderThickness" Value="{StaticResource BorderSize}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextDecorations" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Margin="{TemplateBinding Margin}" MinWidth="{TemplateBinding MinWidth}">
                        <StackPanel x:Name="Panel" Orientation="Horizontal" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >

                            <TextBlock x:Name="Icon"
                                   Style="{Binding Path=(c:IconAttachedProperty.FontIcon), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Mode=OneWay}"
                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                   FontSize="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=FontSize}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="Center"
                                   Visibility="{Binding Path=Style, RelativeSource={RelativeSource Self}, Converter={vc:NullToVisibilityConverter}}"
                                   />

                            <ContentPresenter x:Name="Content" ContentSource="Content" Visibility="{Binding RelativeSource={RelativeSource Self}, Path=Content, Converter={vc:NullToVisibilityConverter}}">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTextBlockStyle}">
                                        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"/>
                                        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=FontSize}"/>
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                        <Setter Property="TextDecorations" Value="{Binding RelativeSource={RelativeSource Self}, Path= TextBlock.TextDecorations}"/>
                                        <Setter Property="Margin" Value="0"/>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="{x:Null}">
                            <Setter TargetName="Content" Property="Margin" Value="0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Right">
                            <!--<Setter Property="Background" Value="Red"/>-->
                            <Setter TargetName="Panel" Property="FlowDirection" Value="RightToLeft"/>
                            <Setter TargetName="Content" Property="Margin" Value="8,0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Top">
                            <!--<Setter Property="Background" Value="Green"/>-->
                            <Setter TargetName="Panel" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="Content" Property="Margin" Value="0,8"/>
                            <Setter TargetName="Icon" Property="TextBlock.FontSize" Value="{StaticResource TitleTextSize}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Bottom">
                            <!--<Setter Property="Background" Value="Orange"/>-->
                            <Setter TargetName="Panel" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="Panel" Property="FlowDirection" Value="RightToLeft"/>
                            <Setter TargetName="Content" Property="Margin" Value="0,8"/>
                            <Setter TargetName="Icon" Property="TextBlock.FontSize" Value="{StaticResource TitleTextSize}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Left">
                            <!--<Setter Property="Background" Value="Blue"/>-->
                            <Setter TargetName="Panel" Property="FlowDirection" Value="LeftToRight"/>
                            <Setter TargetName="Content" Property="Margin" Value="8,0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Center">
                            <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDefault" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource DefaultedColor}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource HoverColor}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource PressColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PressColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Button.Ghost" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Solid}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="MinWidth" Value="{DynamicResource ControlMinWidth}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ActiveColor}"/>
        <Style.Triggers>
            <Trigger Property="IsDefault" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource DefaultedColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource DefaultedColor}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource HoverColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource HoverColor}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource Active}" Opacity="{StaticResource DisabledOpacity}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PressColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource PressColor}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Button.Borderless" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Ghost}">
        <Setter Property="Foreground" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsDefault" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource DefaultedColor}"/>
                <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource HoverColor}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource Default}" Opacity="{StaticResource DisabledOpacity}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource PressColor}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="Button.Solid.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Solid}">
        <Setter Property="FontSize" Value="{StaticResource TitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Large}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Large}"/>
    </Style>

    <Style x:Key="Button.Ghost.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Ghost}">
        <Setter Property="FontSize" Value="{StaticResource TitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Large}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Large}"/>
    </Style>

    <Style x:Key="Button.Borderless.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Borderless}">
        <Setter Property="FontSize" Value="{StaticResource TitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Large}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Large}"/>
    </Style>


    <Style x:Key="Button.Solid.Medium" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Solid}">
        <Setter Property="FontSize" Value="{StaticResource SubTitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Medium}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Medium}"/>
    </Style>

    <Style x:Key="Button.Ghost.Medium" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Ghost}">
        <Setter Property="FontSize" Value="{StaticResource SubTitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Medium}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Medium}"/>
    </Style>

    <Style x:Key="Button.Borderless.Medium" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Borderless}">
        <Setter Property="FontSize" Value="{StaticResource SubTitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Medium}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Medium}"/>
    </Style>


    <Style x:Key="Button.Solid.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Solid}">
        <Setter Property="FontSize"  Value="{StaticResource NoteTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Small}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Small}"/>
    </Style>

    <Style x:Key="Button.Ghost.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Ghost}">
        <Setter Property="FontSize"  Value="{StaticResource NoteTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Small}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Small}"/>
    </Style>

    <Style x:Key="Button.Borderless.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Borderless}">
        <Setter Property="FontSize"  Value="{StaticResource NoteTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Small}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Small}"/>
    </Style>


    <!-- ToggleButton -->
    <Style x:Key="ToggleButton.Solid" TargetType="{x:Type ToggleButton}" >
        <Setter Property="Background" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryColor}"/>
        <Setter Property="FontSize" Value="{StaticResource BodyTextSize}"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="MinWidth" Value="{DynamicResource ControlMinWidth}"/>
        <Setter Property="BorderThickness" Value="{StaticResource BorderSize}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextDecorations" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Margin="{TemplateBinding Margin}" MinWidth="{TemplateBinding MinWidth}">
                        <StackPanel x:Name="Panel" Orientation="Horizontal" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" >

                            <TextBlock x:Name="Icon"
                                   Style="{Binding Path=(c:IconAttachedProperty.FontIcon), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}, Mode=OneWay}"
                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}"
                                   FontSize="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=FontSize}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="Center"
                                   Visibility="{Binding Path=Style, RelativeSource={RelativeSource Self}, Converter={vc:NullToVisibilityConverter}}"
                                   />

                            <ContentPresenter x:Name="Content" ContentSource="Content" Visibility="{Binding RelativeSource={RelativeSource Self}, Path=Content, Converter={vc:NullToVisibilityConverter}}">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTextBlockStyle}">
                                        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}"/>
                                        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=FontSize}"/>
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                        <Setter Property="TextDecorations" Value="{Binding RelativeSource={RelativeSource Self}, Path= TextBlock.TextDecorations}"/>
                                        <Setter Property="Margin" Value="0"/>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="{x:Null}">
                            <Setter TargetName="Content" Property="Margin" Value="0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Right">
                            <!--<Setter Property="Background" Value="Red"/>-->
                            <Setter TargetName="Panel" Property="FlowDirection" Value="RightToLeft"/>
                            <Setter TargetName="Content" Property="Margin" Value="8,0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Top">
                            <!--<Setter Property="Background" Value="Green"/>-->
                            <Setter TargetName="Panel" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="Content" Property="Margin" Value="0,8"/>
                            <Setter TargetName="Icon" Property="TextBlock.FontSize" Value="{StaticResource TitleTextSize}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Bottom">
                            <!--<Setter Property="Background" Value="Orange"/>-->
                            <Setter TargetName="Panel" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="Panel" Property="FlowDirection" Value="RightToLeft"/>
                            <Setter TargetName="Content" Property="Margin" Value="0,8"/>
                            <Setter TargetName="Icon" Property="TextBlock.FontSize" Value="{StaticResource TitleTextSize}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Left">
                            <!--<Setter Property="Background" Value="Blue"/>-->
                            <Setter TargetName="Panel" Property="FlowDirection" Value="LeftToRight"/>
                            <Setter TargetName="Content" Property="Margin" Value="8,0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(c:IconAttachedProperty.IconAlignment)}" Value="Center">
                            <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{DynamicResource DefaultedColor}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource HoverColor}"/>
                <!--<Setter Property="Panel.ZIndex" Value="10"/>-->
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource PressColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PressColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButton.Ghost" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Solid}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="MinWidth" Value="{DynamicResource ControlMinWidth}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ActiveColor}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource DefaultedColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource DefaultedColor}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource Default}" Opacity="{StaticResource DisabledOpacity}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource HoverColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource HoverColor}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource Active}" Opacity="{StaticResource DisabledOpacity}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PressColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource PressColor}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButton.Borderless" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Ghost}">
        <Setter Property="Foreground" Value="{DynamicResource ActiveColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource DefaultedColor}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource Default}" Opacity="{StaticResource DisabledOpacity}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource HoverColor}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource PressColor}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButton.Solid.Large" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Solid}">
        <Setter Property="FontSize" Value="{StaticResource TitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Large}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Large}"/>
    </Style>

    <Style x:Key="ToggleButton.Ghost.Large" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Ghost}">
        <Setter Property="FontSize" Value="{StaticResource TitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Large}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Large}"/>
    </Style>

    <Style x:Key="ToggleButton.Borderless.Large" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Borderless}">
        <Setter Property="FontSize" Value="{StaticResource TitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Large}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Large}"/>
    </Style>


    <Style x:Key="ToggleButton.Solid.Medium" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Solid}">
        <Setter Property="FontSize" Value="{StaticResource SubTitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Medium}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Medium}"/>
    </Style>

    <Style x:Key="ToggleButton.Ghost.Medium" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Ghost}">
        <Setter Property="FontSize" Value="{StaticResource SubTitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Medium}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Medium}"/>
    </Style>

    <Style x:Key="ToggleButton.Borderless.Medium" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Borderless}">
        <Setter Property="FontSize" Value="{StaticResource SubTitleTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Medium}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Medium}"/>
    </Style>


    <Style x:Key="ToggleButton.Solid.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Solid}">
        <Setter Property="FontSize"  Value="{StaticResource NoteTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Small}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Small}"/>
    </Style>

    <Style x:Key="ToggleButton.Ghost.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Ghost}">
        <Setter Property="FontSize"  Value="{StaticResource NoteTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Small}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Small}"/>
    </Style>

    <Style x:Key="ToggleButton.Borderless.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton.Borderless}">
        <Setter Property="FontSize"  Value="{StaticResource NoteTextSize}"/>
        <Setter Property="Margin" Value="{DynamicResource SpaceOuter.Small}"/>
        <Setter Property="Padding" Value="{DynamicResource SpaceInner.Small}"/>
    </Style>

    <!-- Expander -->
    <Style x:Key="Expander.Solid" TargetType="{x:Type Expander}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource BodyTextSize}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource SecondaryColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" Content="{Binding Header, RelativeSource={RelativeSource AncestorType=Expander}}" 
                                      c:IconAttachedProperty.FontIcon="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Path=(c:IconAttachedProperty.FontIcon), Mode=OneWay}" 
                                      c:IconAttachedProperty.IconAlignment="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Path=(c:IconAttachedProperty.IconAlignment), Mode=OneWay}" 
                                      DockPanel.Dock="Top" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=Expander}}" Style="{StaticResource ToggleButton.Solid}" HorizontalContentAlignment="Stretch" Margin="0"/>
                        <ContentPresenter x:Name="ExpandSite" Visibility="{Binding IsChecked, ElementName=HeaderSite, Converter={vc:BooleanToVisibilityConverter}}"/>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander.Ghost" TargetType="{x:Type Expander}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource BodyTextSize}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource SecondaryColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" Content="{Binding Header, RelativeSource={RelativeSource AncestorType=Expander}}" 
                                      c:IconAttachedProperty.FontIcon="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Path=(c:IconAttachedProperty.FontIcon), Mode=OneWay}" 
                                      c:IconAttachedProperty.IconAlignment="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Path=(c:IconAttachedProperty.IconAlignment), Mode=OneWay}" 
                                      DockPanel.Dock="Top" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=Expander}}" Style="{StaticResource ToggleButton.Ghost}" HorizontalContentAlignment="Left" Margin="0"/>
                        <ContentPresenter x:Name="ExpandSite" Visibility="{Binding IsChecked, ElementName=HeaderSite, Converter={vc:BooleanToVisibilityConverter}}"/>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander.Borderless" TargetType="{x:Type Expander}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource BodyTextSize}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource SecondaryColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" Content="{Binding Header, RelativeSource={RelativeSource AncestorType=Expander}}" 
                                      c:IconAttachedProperty.FontIcon="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Path=(c:IconAttachedProperty.FontIcon), Mode=OneWay}" 
                                      c:IconAttachedProperty.IconAlignment="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Path=(c:IconAttachedProperty.IconAlignment), Mode=OneWay}" 
                                      DockPanel.Dock="Top" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=Expander}}" Style="{StaticResource ToggleButton.Borderless}" HorizontalContentAlignment="Left" Margin="0"/>
                        <ContentPresenter x:Name="ExpandSite" Visibility="{Binding IsChecked, ElementName=HeaderSite, Converter={vc:BooleanToVisibilityConverter}}"/>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
